# First create the deployment-bucket stack from the other cloudformation template.
# Build the service project and upload the jar file before creating the main stack, since it will refer to the bucket
#
# The IAM user that will execute the following command should have privileges as in greetapp-cloudformation-user-policy.json
#
# $ aws cloudformation create-stack --stack-name greetapp --capabilities CAPABILITY_NAMED_IAM --template-body file://greetapp-cloudformation.yaml
#
# Then configure the environment of the lambda function according to the service README file.

Resources:

  GreetAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Name: name
          Required: true
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: greetapp

  GreetAppUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        !Sub
          - 'greetapp-${RandomGUID}'
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      UserPoolId: !Ref GreetAppUserPool

  GreetAppUserPoolClientDev:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:5000/?auth-redirect
      ClientName: greetapp-dev
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
      LogoutURLs:
        - http://localhost:5000/?logoff-redirec
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref GreetAppUserPool

  GreetAppUserPoolClientProd:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - !Sub "https://${GreetAppCloudFrontDistribution.DomainName}/?auth-redirect"
      ClientName: greetapp-prod
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
      LogoutURLs:
        - !Sub "https://${GreetAppCloudFrontDistribution.DomainName}/?logoff-redirec"
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref GreetAppUserPool

  GreetAppIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowClassicFlow: false
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref GreetAppUserPoolClientDev
          ProviderName: !GetAtt GreetAppUserPool.ProviderName
          ServerSideTokenCheck: false
        - ClientId: !Ref GreetAppUserPoolClientProd
          ProviderName: !GetAtt GreetAppUserPool.ProviderName
          ServerSideTokenCheck: false
      IdentityPoolName: greetapp

  GreetAppIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref GreetAppIdentityPool
      Roles:
        "authenticated": !GetAtt GreetAppAuthRole.Arn
        "unauthenticated": !GetAtt GreetAppUnauthRole.Arn

  GreetAppAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref GreetAppIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "authenticated"
      Policies:
        - PolicyName: Cognito_greetappAuth_Role_inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: '*'
      RoleName: Cognito_greetappAuth_Role

  GreetAppUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref GreetAppIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"
      Policies:
        - PolicyName: Cognito_greetappUnauth_Role_inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: '*'
      RoleName: Cognito_greetappUnauth_Role

  MessageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "type"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "type"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Message"

  GreetAppServiceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs_greetappServiceFunction_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/greetapp-service:*'
        - PolicyName: DynamoDB_greetappServiceFunction_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt MessageTable.Arn
      RoleName: Lambda_greetappService_Role

  GreetAppServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: greetapp-service
      Runtime: java21
      Timeout: 15
      MemorySize: 512
      Architectures:
        - arm64
      Code:
        S3Bucket:
          Fn::ImportValue: GREET-APP-SERVICE-FUNCTION-BUCKET
        S3Key: greetapp-1.0-SNAPSHOT.jar
      Role: !GetAtt GreetAppServiceFunctionRole.Arn
      Handler: io.github.greetapp.LambdaMethodHandler
      TracingConfig:
        Mode: Active

  GreetAppServiceFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      Cors:
        AllowOrigins:
          - https://greetapp.github.io
      TargetFunctionArn: !Ref GreetAppServiceFunction

  GreetAppServiceFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GreetAppServiceFunction
      FunctionUrlAuthType: NONE
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

  GreetAppWebClientS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        !Sub
          - 'greetapp-webclient-${RandomGUID}'
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete

  GreetAppWebClientS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GreetAppWebClientS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${GreetAppWebClientS3Bucket.Arn}/*
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${GreetAppCloudFrontDistribution}"
  
  GreetAppOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig: 
          Name: !Sub ${GreetAppWebClientS3Bucket}.s3.${AWS::Region}.amazonaws.com
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

  GreetAppCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig:
        PriceClass: PriceClass_100
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Sub ${GreetAppWebClientS3Bucket}.s3.${AWS::Region}.amazonaws.com
            Id: greetapp-webclient
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref GreetAppOriginAccessControl
          - DomainName: !Select [2, !Split ['/', !GetAtt GreetAppServiceFunctionUrl.FunctionUrl]]
            Id: greetapp-service
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginAccessControlId: ''
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: greetapp-webclient
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: https-only
        CacheBehaviors:
          - PathPattern: '/greet'
            TargetOriginId: greetapp-service
            Compress: true
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # "Managed-CachingDisabled"

Outputs:

  UserPoolId:
    Value: !GetAtt GreetAppUserPool.ProviderName
    Export:
      Name: GREET-APP-USER-POOL-ID

  UserPoolDomain:
    Value: !Ref GreetAppUserPoolDomain
    Export:
      Name: GREET-APP-USER-POOL-DOMAIN

  UserPoolAppClientIdDev:
    Value: !Ref GreetAppUserPoolClientDev
    Export:
      Name: GREET-APP-USER-POOL-APP-CLIENT-ID-DEV

  UserPoolAppClientIdProd:
    Value: !Ref GreetAppUserPoolClientProd
    Export:
      Name: GREET-APP-USER-POOL-APP-CLIENT-ID-PROD

  IdentityPoolId:
    Value: !Ref GreetAppIdentityPool
    Export:
      Name: GREET-APP-IDENTITY-POOL-ID

  GreetAppServiceFunctionUrl:
    Value: !GetAtt GreetAppServiceFunctionUrl.FunctionUrl
    Export:
      Name: GREET-APP-SERVICE-FUNCTION-URL
  
  CloudFrontDistributionDomain:
    Value: !GetAtt GreetAppCloudFrontDistribution.DomainName
    Export:
      Name: GREET-APP-CLOUDFRONT-DOMAIN
